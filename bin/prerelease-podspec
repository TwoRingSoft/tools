#! /usr/bin/env ruby

require 'open3'
require 'optparse'
require_relative '../lib/git_check'
require_relative '../lib/echoexec'

version_file = ARGV[0]
podspec = version_file.split('/')[-1].split('.podspec')[0]

# failure modes
PODSPEC_FAILED_VALIDATION = 65

options = {}
parser = OptionParser.new do |opts|
  opts.banner = <<~BANNER

    Usage: prerelease-podspec [options] <podspec-path>

           Branch and create/push a release candidate tag, modify the podspec to use that version tag, and try linting it.

    Options:

  BANNER
  opts.on('-w', '--allow-warnings', 'Pass \'--allow-warnings\' to \'cocoapods spec lint\'.') do |force| options[:allow_warnings] = true end
  opts.on('-v', '--verbose', 'Pass \'--verbose\' to \'cocoapods spec lint\'.') do |name| options[:verbose] = true end
  opts.on('-n', '--podspec-name-in-tag', 'When forming the tag name for a release candidate, prefix the podspecâ€˜s name to the version string. Helps when you have multiple podspecs in a repository and tag versions for each.') do |podspec_name_in_tag| options[:podspec_name_in_tag] = true end
  opts.on('-n', '--no-branch', 'Make any changes on the current branch instead of creating a temporary new branch.') do |no_branch| options[:no_branch] = true end
  opts.on('-cCHANGELOG', '--changelog=CHANGELOG', 'Location of a CHANGELOG document adhering to https://keepachangelog.com/en/1.0.0/ whose version entry should be extracted into an annotated tag for this release candidate.') do |changelog| options[:changelog] = changelog end
  opts.on('-h', '--help', 'Print this help message.') do
    puts opts
    exit
  end
end
parser.parse!

git_check unless options[:no_commit]

current_version = `vrsn --read --file #{version_file}`.strip
unless options[:no_branch] then
  branch = "#{podspec}-#{current_version}-release"
  echo_and_exec "git checkout -b #{branch}"
end

version_root = "#{current_version}-RC"
release_candidate_number = `git tag --list | grep #{version_root} | wc -l`.strip.to_i + 1
release_candidate_version = "#{version_root}#{release_candidate_number}"

tag_value = String.new
if options[:podspec_name_in_tag] then
  tag_value = "#{podspec}-#{release_candidate_version}"
else
  tag_value = "#{release_candidate_version}"
end

echo_and_exec "sed -i '' \"s/\\(\\.version *= *'\\).*'/\\1\"#{release_candidate_version}\"\\'/g\" #{version_file}"
echo_and_exec "git add #{version_file}"
echo_and_exec "git commit --message 'chore(#{podspec}): set to release candidate version'"

if options[:changelog] then
  echo_and_exec 'git config core.commentchar @'
  echo_and_exec "rbenv exec bundle exec changetag --name #{current_version} #{options[:changelog]} #{tag_value}"
  echo_and_exec 'git config core.commentchar #'
else
  echo_and_exec "git tag #{tag_value}"
end
echo_and_exec 'git push --tags'

puts "About to lint the podspec. This takes a while... (it is now #{Time.now})"
spec_lint_flags = Array.new
if options[:allow_warnings] != nil then
  spec_lint_flags << '--allow-warnings'
end
if options[:verbose] != nil then
  spec_lint_flags << '--verbose'
end
stdout, stderr, status = Open3.capture3 "rbenv exec bundle exec pod spec lint #{version_file} #{spec_lint_flags.join ' '}"

puts "stdout: #{stdout}"

unless options[:no_branch] then
  echo_and_exec 'git checkout master'
  echo_and_exec "git branch -D #{branch}"
end

if status != 0 then
  puts "Podspec failed validation:\nstderr: #{stderr}"
  exit PODSPEC_FAILED_VALIDATION
else
  puts "Podspec passed validation!"
end
